diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9dc1f10..edbeb2d 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -134,7 +134,7 @@ add_library(wsclean-lib STATIC ${WSCLEANFILES})
 set_target_properties(wsclean-lib PROPERTIES OUTPUT_NAME wsclean)
 
 add_library(wsclean-shared SHARED ${WSCLEANFILES})
-target_link_libraries(wsclean-shared)
+target_link_libraries(wsclean-shared ${CASACORE_LIBRARIES} ${FFTW3_LIB} ${FFTW3_THREADS_LIB} ${Boost_DATE_TIME_LIBRARY} ${Boost_FILESYSTEM_LIBRARY} ${Boost_THREAD_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${CFITSIO_LIBRARY} ${GSL_LIB} ${GSL_CBLAS_LIB} ${PTHREAD_LIB} ${LBEAM_LIBS} ${IDGAPI_LIBRARIES})
 
 add_executable(wsclean wscleanmain.cpp)
 target_link_libraries(wsclean wsclean-lib ${CASACORE_LIBRARIES} ${FFTW3_LIB} ${FFTW3_THREADS_LIB} ${Boost_DATE_TIME_LIBRARY} ${Boost_FILESYSTEM_LIBRARY} ${Boost_THREAD_LIBRARY} ${Boost_SYSTEM_LIBRARY} ${CFITSIO_LIBRARY} ${GSL_LIB} ${GSL_CBLAS_LIB} ${PTHREAD_LIB} ${LBEAM_LIBS} ${IDGAPI_LIBRARIES})
@@ -151,7 +151,6 @@ set_target_properties(wsclean-lib PROPERTIES COMPILE_FLAGS "-std=c++0x")
 set_target_properties(wsclean-shared PROPERTIES COMPILE_FLAGS "-std=c++0x")
 
 install(TARGETS wsclean DESTINATION bin)
-install(TARGETS wsclean-lib DESTINATION lib)
 install(FILES interface/wscleaninterface.h DESTINATION include)
 
 # add target to generate API documentation with Doxygen
diff --git a/dftpredictionalgorithm.cpp b/dftpredictionalgorithm.cpp
index 29953d1..b561232 100644
--- a/dftpredictionalgorithm.cpp
+++ b/dftpredictionalgorithm.cpp
@@ -267,7 +267,7 @@ void DFTPredictionAlgorithm::predict(MC2x2& dest, double u, double v, double w,
 	double l = component.L(), m = component.M(), lmsqrt = component.LMSqrt();
 	double angle = 2.0*M_PI*(u*l + v*m + w*(lmsqrt-1.0));
 	double sinangleOverLMS, cosangleOverLMS;
-	sincos(angle, &sinangleOverLMS, &cosangleOverLMS);
+	__sincos(angle, &sinangleOverLMS, &cosangleOverLMS);
 	MC2x2 appFlux;
 	if(_hasBeam)
 	{
diff --git a/dftpredictionalgorithm.h b/dftpredictionalgorithm.h
index bdf2e64..4bcc499 100644
--- a/dftpredictionalgorithm.h
+++ b/dftpredictionalgorithm.h
@@ -98,7 +98,7 @@ private:
 		// Position angle is angle from North:
 		// (TODO this and next statements can be optimized to remove add)
 		double paSin, paCos;
-		sincos(positionAngle+0.5*M_PI, &paSin, &paCos);
+		__sincos(positionAngle+0.5*M_PI, &paSin, &paCos);
 		// Make rotation matrix
 		long double transf[4];
 		transf[0] = paCos;
diff --git a/imageweights.cpp b/imageweights.cpp
index 08dfd3a..ab86065 100644
--- a/imageweights.cpp
+++ b/imageweights.cpp
@@ -191,7 +191,7 @@ void ImageWeights::FinishGridding()
 			for(ao::uvector<double>::const_iterator i=_grid.begin(); i!=_grid.end(); ++i)
 				avgW += *i * *i;
 			avgW /= _totalSum;
-			double numeratorSqrt = 5.0 * exp10(-_weightMode.BriggsRobustness());
+			double numeratorSqrt = 5.0 * __exp10(-_weightMode.BriggsRobustness());
 			double sSq = numeratorSqrt*numeratorSqrt / avgW;
 			for(ao::uvector<double>::iterator i=_grid.begin(); i!=_grid.end(); ++i)
 			{
diff --git a/matrix2x2.h b/matrix2x2.h
index 5f61592..02936f9 100644
--- a/matrix2x2.h
+++ b/matrix2x2.h
@@ -272,7 +272,7 @@ public:
 	static void RotationMatrix(std::complex<T>* matrix, double alpha)
 	{
 		T cosAlpha, sinAlpha;
-		sincos(alpha, &sinAlpha, &cosAlpha);
+		__sincos(alpha, &sinAlpha, &cosAlpha);
 		matrix[0] = cosAlpha; matrix[1] = -sinAlpha;
 		matrix[2] = sinAlpha; matrix[3] = cosAlpha;
 	}
diff --git a/modelrenderer.cpp b/modelrenderer.cpp
index 51e509d..f355a53 100644
--- a/modelrenderer.cpp
+++ b/modelrenderer.cpp
@@ -4,6 +4,7 @@
 #include "fitsreader.h"
 #include "modelrenderer.h"
 #include "model/model.h"
+#include "units/radeccoord.h"
 #include "units/imagecoordinates.h"
 #include "uvector.h"
 #include "fftconvolver.h"
@@ -88,7 +89,8 @@ void ModelRenderer::renderGaussianComponent(double* imageData, size_t imageWidth
 	// Make rotation matrix
 	long double transf[4];
 	// Position angle is angle from North: 
-	sincosl(gausPA+0.5*M_PI, &transf[2], &transf[0]);
+	transf[2] = sin(gausPA+0.5*M_PI);
+	transf[0] = cos(gausPA+0.5*M_PI);
 	transf[1] = -transf[2];
 	transf[3] = transf[0];
 	double sigmaMax = std::max(std::fabs(sigmaMaj * transf[0]), std::fabs(sigmaMaj * transf[1]));
@@ -179,7 +181,8 @@ void ModelRenderer::Restore(double* imageData, const double* modelData, size_t i
 		// Make rotation matrix
 		long double transf[4];
 		// Position angle is angle from North: 
-		sincosl(beamPA+0.5*M_PI, &transf[2], &transf[0]);
+		transf[2] = sin(beamPA+0.5*M_PI);
+		transf[0] = cos(beamPA+0.5*M_PI);
 		transf[1] = -transf[2];
 		transf[3] = transf[0];
 		double sigmaMax = std::max(std::fabs(sigmaMaj * transf[0]), std::fabs(sigmaMaj * transf[1]));
diff --git a/msproviders/partitionedms.cpp b/msproviders/partitionedms.cpp
index 8339047..0df1687 100644
--- a/msproviders/partitionedms.cpp
+++ b/msproviders/partitionedms.cpp
@@ -70,7 +70,8 @@ PartitionedMS::PartitionedMS(const Handle& handle, size_t partIndex, Polarizatio
 			{
 				int errsv = errno;
 				char buffer[1024];
-				const char* msg = strerror_r(errsv, buffer, 1024); 
+				const char* msg = buffer;
+				strerror_r(errsv, buffer, 1024); 
 				
 				_modelFileMap = 0;
 				throw std::runtime_error(std::string("Error creating memory map to temporary model file: mmap() returned MAP_FAILED with error message: ") + msg);
diff --git a/nlplfitter.cpp b/nlplfitter.cpp
index 0675622..2075824 100644
--- a/nlplfitter.cpp
+++ b/nlplfitter.cpp
@@ -145,8 +145,8 @@ public:
 				const double a_j = gsl_vector_get(xvec, j);
 				fity = a_j + fity * lg;
 			}
-			//std::cout << x << ':' << fity << " / " << exp10(fity) << "\n";
-			gsl_vector_set(f, i, exp10(fity) - y);
+			//std::cout << x << ':' << fity << " / " << __exp10(fity) << "\n";
+			gsl_vector_set(f, i, __exp10(fity) - y);
 		}
 			
 		return GSL_SUCCESS;
@@ -171,7 +171,7 @@ public:
 				const double a_j = gsl_vector_get(xvec, j);
 				fity = a_j + fity * lg;
 			}
-			fity = exp10(fity);
+			fity = __exp10(fity);
 			// dY/da_i = e^[ a_0...a_i-1,a_i+1...a_n] * (e^[a_i {log x}^i]) {log x}^i
 			gsl_matrix_set(J, i, 0, fity);
 			
@@ -397,9 +397,9 @@ void NonLinearPowerLawFitter::Fit(ao::uvector<double>& terms, size_t nTerms)
 	}
 	
 	if(isNegative)
-		terms[0] = -exp10(terms[0]);
+		terms[0] = -__exp10(terms[0]);
 	else
-		terms[0] = exp10(terms[0]);
+		terms[0] = __exp10(terms[0]);
 }
 
 void NonLinearPowerLawFitter::FitStable(ao::uvector<double>& terms, size_t nTerms)
@@ -437,9 +437,9 @@ void NonLinearPowerLawFitter::FitStable(ao::uvector<double>& terms, size_t nTerm
 	}
 	
 	if(isNegative)
-		terms[0] = -exp10(terms[0]);
+		terms[0] = -__exp10(terms[0]);
 	else
-		terms[0] = exp10(terms[0]);
+		terms[0] = __exp10(terms[0]);
 }
 
 void NonLinearPowerLawFitter::FastFit(double& exponent, double& factor)
@@ -502,5 +502,5 @@ double NonLinearPowerLawFitter::Evaluate(double x, const ao::uvector<double>& te
 		size_t j = terms.size()-k-1;
 		y = y * lg + terms[j];
 	}
-	return exp10(y * lg) * terms[0];
+	return __exp10(y * lg) * terms[0];
 }
diff --git a/nlplfitter.h b/nlplfitter.h
index 7df2162..6660ede 100644
--- a/nlplfitter.h
+++ b/nlplfitter.h
@@ -40,7 +40,7 @@ public:
 		
 	/*static double Term0ToFactor(double term0, double term1)
 	{
-		return exp10(term0); // + term1*log(NLPLFact));
+		return __exp10(term0); // + term1*log(NLPLFact));
 	}
 	
 	static double FactorToTerm0(double factor, double term1)
diff --git a/units/imagecoordinates.h b/units/imagecoordinates.h
index bbfcf04..3c0eaf6 100644
--- a/units/imagecoordinates.h
+++ b/units/imagecoordinates.h
@@ -130,13 +130,19 @@ class ImageCoordinates
 		}
 	private:
 		static void SinCos(double angle, double* sinAngle, double* cosAngle)
-		{ sincos(angle, sinAngle, cosAngle); }
+		{ __sincos(angle, sinAngle, cosAngle); }
 		
 		static void SinCos(long double angle, long double* sinAngle, long double* cosAngle)
-		{ sincosl(angle, sinAngle, cosAngle); }
+		{
+		    *sinAngle = sin(angle);
+		    *cosAngle = cos(angle);
+		}
 		
 		static void SinCos(float angle, float* sinAngle, float* cosAngle)
-		{ sincosf(angle, sinAngle, cosAngle); }
+		{
+		    *sinAngle = sin(angle);
+		    *cosAngle = cos(angle);
+		}
 		
 		ImageCoordinates();
 };
diff --git a/units/radeccoord.h b/units/radeccoord.h
index 9b4f890..a7f8f6d 100644
--- a/units/radeccoord.h
+++ b/units/radeccoord.h
@@ -7,6 +7,8 @@
 #include <cstdlib>
 #include <cmath>
 
+#define M_PIl 3.1415926535897932384626433832795029L
+
 class RaDecCoord
 {
 	private:
@@ -64,7 +66,7 @@ class RaDecCoord
 			else
 				return (hrs/24.0 + mins/(24.0*60.0) + secs/(24.0*60.0*60.0))*2.0*M_PI;
 		}
-		
+
 		static long double ParseDec(const std::string &str)
 		{
 			char *cstr;
@@ -116,7 +118,7 @@ class RaDecCoord
 			else
 				return (degs/360.0 + mins/(360.0*60.0) + secs/(360.0*60.0*60.0))*2.0*M_PI;
 		}
-		
+
 		static std::string RAToString(long double ra)
 		{
 			const long double partsPerHour = 60.0L*60.0L*1000.0L;
@@ -144,7 +146,7 @@ class RaDecCoord
 			s << 's';
 			return s.str();
 		}
-		
+
 		static std::string RAToString(long double ra, char delimiter)
 		{
 			const long double partsPerHour = 60.0L*60.0L*1000.0L;
@@ -171,12 +173,12 @@ class RaDecCoord
 			}
 			return s.str();
 		}
-		
+
 		static std::string RaDecToString(long double ra, long double dec)
 		{
 			return RAToString(ra) + ' ' + DecToString(dec);
 		}
-		
+
 		static void RAToHMS(long double ra, int& hrs, int& min, double& sec)
 		{
 			const long double partsPerHour = 60.0L*60.0L*100.0L;
@@ -194,7 +196,7 @@ class RaDecCoord
 			min = int(floorl(fmodl(hrsf,1.0L)*60.0L));
 			sec = floorl(100.0L*fmodl(hrsf*60.0L,1.0L)*60.0L)/100.0L;
 		}
-		
+
 		static std::string DecToString(long double dec)
 		{
 			const long double partsPerDeg = 60.0L*60.0L*1000.0L;
@@ -227,7 +229,7 @@ class RaDecCoord
 			s << 's';
 			return s.str();
 		}
-		
+
 		static std::string DecToString(long double dec, char delimiter)
 		{
 			const long double partsPerDeg = 60.0L*60.0L*1000.0L;
@@ -259,7 +261,7 @@ class RaDecCoord
 			}
 			return s.str();
 		}
-		
+
 		static void DecToDMS(long double dec, int& deg, int& min, double& sec)
 		{
 			const long double partsPerDeg = 60.0L*60.0L*100.0L;
@@ -270,7 +272,7 @@ class RaDecCoord
 				degf = -degf;
 			}
 			degf = (round(degf*partsPerDeg)+0.5) / partsPerDeg;
-			
+
 			if(negate)
 				deg = -int(floor(degf));
 			else
diff --git a/wsclean/msgridderbase.cpp b/wsclean/msgridderbase.cpp
index 680da44..e79cbda 100644
--- a/wsclean/msgridderbase.cpp
+++ b/wsclean/msgridderbase.cpp
@@ -389,7 +389,7 @@ void MSGridderBase::rotateVisibilities(const BandData& bandData, double shiftFac
 	{
 		const double wShiftRad = shiftFactor / bandData.ChannelWavelength(ch);
 		double rotSinD, rotCosD;
-		sincos(wShiftRad, &rotSinD, &rotCosD);
+		__sincos(wShiftRad, &rotSinD, &rotCosD);
 		float rotSin = rotSinD, rotCos = rotCosD;
 		std::complex<float> v = *dataIter;
 		*dataIter = std::complex<float>(
diff --git a/wsclean/wstackinggridder.cpp b/wsclean/wstackinggridder.cpp
index c6ebe31..f2e8e0e 100644
--- a/wsclean/wstackinggridder.cpp
+++ b/wsclean/wstackinggridder.cpp
@@ -708,7 +708,7 @@ void WStackingGridder::projectOnImageAndCorrect(const std::complex<double> *sour
 			
 			double rad = twoPiW * *sqrtLMIter;
 			double s, c;
-			sincos(rad, &s, &c);
+			__sincos(rad, &s, &c);
 			/*std::complex<double> val = std::complex<double>(
 				source->real() * c - source->imag() * s,
 				source->real() * s + source->imag() * c
@@ -782,7 +782,7 @@ void WStackingGridder::copyImageToLayerAndInverseCorrect(std::complex<double> *d
 			
 			double rad = twoPiW * *sqrtLMIter;
 			double s, c;
-			sincos(rad, &s, &c);
+			__sincos(rad, &s, &c);
 			double realVal = dataReal[xDest + yDest*_width];
 			if(IsComplexImpl)
 			{
